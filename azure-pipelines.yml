trigger:
- Deployment-Webapp

variables:
  #- group: simpleFlaskApp
  - name: azure-resource-group-name
    value: mixit2-rg
  - name: azure-resource-location
    value: westeurope
  - name: azure-web-app-name
    value: miketestmixit
  - name: azure-subscription-id
    value: 767f3596-1bc3-4135-a908-ef32402461f5
  - name: templateFile
    value: main.bicep
  - name: webApp 
    value: ditiseentest
  - name: environmentName
    value: test

  # Project root folder. Point to the folder containing manage.py file.

stages:   
- stage: Deploy_infrastructure
  jobs:
  - job: Deploy_infrastructure
    pool:
      name: Azure Pipelines
    steps:
    - script:  az login
    - script: |
        az group create --name $(azure-resource-group-name) --location $(azure-resource-location)
        az deployment group create --resource-group $(azure-resource-group-name) --template-file $(templateFile)
# - stage: Publish_Code
#   dependsOn: Deploy_infrastructure
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: test
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'
#           - script: |
#               python -m venv antenv
#               source antenv/bin/activate
#               python -m pip install --upgrade pip
#               pip install setup
#               pip install -r requirements.txt
#             workingDirectory: $(projectRoot)
#             displayName: "Install requirements"
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : {{ webAppName }}'
#             inputs:
#               appType: 'webApp'
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

#           # The following parameter is specific to the Flask example code. You may
#           # or may not need a startup command for your app.

#               startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 startup:app'    
  # jobs:
  # - job: Publish_Code
  #   variables:
  #     projectRoot: $(System.DefaultWorkingDirectory)
  #     pythonVersion: '3.9'
  #     environmentName: test
  #     azureServiceConnectionId: 767f3596-1bc3-4135-a908-ef32402461f5
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #     steps:
  #     - task: UsePythonVersion@0
  #       inputs:
  #         versionSpec: '$(pythonVersion)'
  #       displayName: 'Use Python $(pythonVersion)'
      
  #     - script: |
  #         python -m venv antenv
  #         source antenv/bin/activate
  #         python -m pip install --upgrade pip
  #         pip install setup
  #         pip install -r requirements.txt
  #       workingDirectory: $(projectRoot)
  #       displayName: "Install requirements"
  #     - task: ArchiveFiles@2
  #       displayName: 'Archive files'
  #       inputs:
  #         rootFolderOrFile: '$(Build.SourcesDirectory)'
  #         includeRootFolder: false
  #         archiveType: 'zip'
  #         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  #         replaceExistingArchive: true
  #     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  #       displayName: 'Upload package'
  #       artifact: drop
  #       steps:
  #     - task: AzureWebApp@1
  #       displayName: 'Deploy Azure Web App : {{ azure-web-app-name }}'
  #       inputs:
  #         azureSubscription: $(azure-subscription-id)
  #         appName: $(azure-web-app-name)
  #         package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
  #         # The following parameter is specific to the Flask example code. You may
  #         # or may not need a startup command for your app.

  #         startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 startup:app'
# - stage: Deploy
#   displayName: 'Deploy Web App'
#   dependsOn: Publish_Code
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: test
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: UsePythonVersion@0
#             inputs:
#               versionSpec: '$(pythonVersion)'
#             displayName: 'Use Python version'

#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App : {{ webAppName }}'
#             inputs:
#               appType: 'webApp'
#               azureSubscription: $(azure-subscription-id)
#               appName: $(webAppName)
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
    
