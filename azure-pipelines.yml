trigger:
- Deployment-Webapp

stages:
  - stage: build 
    displayName: "build and push to container registery"
    pool: 
      name: Default
    jobs:
      - job: install_dependencies
        steps:
          - script: az login --identity
            displayName: 'Authenticate Azure CLI using private agent identity'
          - script: apt update
            displayName: 'apt update database'
          - script: apt install python python-pip
            displayName: 'apt install python and pip'
          - script: python -m pip install --upgrade flask
            displayName: 'Install flask application'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(pythonVersion)'
          displayName: 'Use Python $(pythonVersion)'
      - script: |
          python -m venv antenv
          source antenv/bin/activate
          python -m pip install --upgrade pip
          pip install setup
          pip install -r requirements.txt
        workingDirectory: $(projectRoot)
        displayName: "Install requirements"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
          replaceExistingArchive: true
          verbose: # (no value); this input is optional
      - publish: $(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip
        displayName: 'Upload package'
        artifact: drop
      - job:
        - deployment: DeploymentJob
        pool:
          name: Default
        strategy:
          runOnce:
            deploy:
              steps:
              - task: UsePythonVersion@0
                inputs:
                  versionSpec: '$(pythonVersion)'
                displayName: 'Use Python version'
              - task: AzureWebApp@1
                displayName: 'Deploy Azure Web App : {{ webAppName }}'
                inputs:
                  azureSubscription: $(azureServiceConnectionId)
                  appName: $(webAppName)
                  package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
# variables:
#   #- group: simpleFlaskApp
#   - name: azure-resource-group-name
#     value: mixit2-rg
#   - name: azure-resource-location
#     value: westeurope
#   - name: azure-web-app-name
#     value: miketestmixit
#   - name: azure-subscription-id
#     value: 7421d281-52e1-4c64-b11d-12ee02151732
#   - name: templateFile
#     value: main.bicep
#   - name: webApp 
#     value: ditiseentest
#   - name: environmentName
#     value: test

#   # Project root folder. Point to the folder containing manage.py file.

# stages:   
# - stage: Deploy_infrastructure
#   jobs:
#   - job: Deploy_infrastructure
#     pool:
#       name: Default
#     steps:
#     - script:  az login --identity
#     # - script: |
#     #     az deployment group create --resource-group Mixit2-rg --template-file $(templateFile)
# - stage: build 
#   displayName: "build and push to container registery"
#   jobs:
#     - job: install_dependencies
#       steps:
#         - script: apt  update
#           displayName: 'apt update database'
#         - script: sudo apt install python python-pip
#           displayName: 'apt install python and pip'
#         - script: python -m pip install --upgrade flask
#           displayName: 'Install flask application'
# - script: apt install python3
  - stage: Publish_Code
    dependsOn: Deploy_infrastructure
    jobs:
    - deployment: DeploymentJob
      pool:
        name: Default
      environment: test
      strategy:
        runOnce:
          deploy:
            steps:
            - task: UsePythonVersion@0
              inputs:
                versionSpec: '$(pythonVersion)'
              displayName: 'Use Python version'
            - script: |
                python -m venv antenv
                source antenv/bin/activate
                python -m pip install --upgrade pip
                pip install setup
                pip install -r requirements.txt
              workingDirectory: $(projectRoot)
              displayName: "Install requirements"
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: '$(Build.SourcesDirectory)'
                includeRootFolder: false
                archiveType: 'zip'
                archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
                replaceExistingArchive: true
                verbose: # (no value); this input is optional
            - publish: $(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip
              displayName: 'Upload package'
              artifact: drop
jobs:
- deployment: DeploymentJob
pool:
  name: Default
  strategy:
  runOnce:
    deploy:
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(pythonVersion)'
        displayName: 'Use Python version'

      - task: AzureWebApp@1
        displayName: 'Deploy Azure Web App : {{ webAppName }}'
        inputs:
          azureSubscription: $(azureServiceConnectionId)
          appName: $(webAppName)
          package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

          # The following parameter is specific to the Flask example code. You may
          # or may not need a startup command for your app.

          startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 startup:app'